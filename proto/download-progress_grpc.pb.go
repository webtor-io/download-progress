// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package download_progress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DownloadProgressClient is the client API for DownloadProgress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadProgressClient interface {
	// Get download stat
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// Get download stat stream
	StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (DownloadProgress_StatStreamClient, error)
}

type downloadProgressClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadProgressClient(cc grpc.ClientConnInterface) DownloadProgressClient {
	return &downloadProgressClient{cc}
}

func (c *downloadProgressClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/DownloadProgress/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadProgressClient) StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (DownloadProgress_StatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DownloadProgress_ServiceDesc.Streams[0], "/DownloadProgress/StatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &downloadProgressStatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DownloadProgress_StatStreamClient interface {
	Recv() (*StatReply, error)
	grpc.ClientStream
}

type downloadProgressStatStreamClient struct {
	grpc.ClientStream
}

func (x *downloadProgressStatStreamClient) Recv() (*StatReply, error) {
	m := new(StatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloadProgressServer is the server API for DownloadProgress service.
// All implementations must embed UnimplementedDownloadProgressServer
// for forward compatibility
type DownloadProgressServer interface {
	// Get download stat
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// Get download stat stream
	StatStream(*StatRequest, DownloadProgress_StatStreamServer) error
	mustEmbedUnimplementedDownloadProgressServer()
}

// UnimplementedDownloadProgressServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadProgressServer struct {
}

func (UnimplementedDownloadProgressServer) Stat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedDownloadProgressServer) StatStream(*StatRequest, DownloadProgress_StatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StatStream not implemented")
}
func (UnimplementedDownloadProgressServer) mustEmbedUnimplementedDownloadProgressServer() {}

// UnsafeDownloadProgressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadProgressServer will
// result in compilation errors.
type UnsafeDownloadProgressServer interface {
	mustEmbedUnimplementedDownloadProgressServer()
}

func RegisterDownloadProgressServer(s grpc.ServiceRegistrar, srv DownloadProgressServer) {
	s.RegisterService(&DownloadProgress_ServiceDesc, srv)
}

func _DownloadProgress_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadProgressServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DownloadProgress/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadProgressServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadProgress_StatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloadProgressServer).StatStream(m, &downloadProgressStatStreamServer{stream})
}

type DownloadProgress_StatStreamServer interface {
	Send(*StatReply) error
	grpc.ServerStream
}

type downloadProgressStatStreamServer struct {
	grpc.ServerStream
}

func (x *downloadProgressStatStreamServer) Send(m *StatReply) error {
	return x.ServerStream.SendMsg(m)
}

// DownloadProgress_ServiceDesc is the grpc.ServiceDesc for DownloadProgress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadProgress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DownloadProgress",
	HandlerType: (*DownloadProgressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _DownloadProgress_Stat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatStream",
			Handler:       _DownloadProgress_StatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "download-progress.proto",
}
